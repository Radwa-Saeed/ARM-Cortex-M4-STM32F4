
Task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800073c  08000744  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800073c  0800073c  00010744  2**0
                  CONTENTS
  4 .ARM          00000000  0800073c  0800073c  00010744  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800073c  08000744  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800073c  0800073c  0001073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000740  08000740  00010740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000744  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000744  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b9f  00000000  00000000  00010774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000306  00000000  00000000  00011313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00011620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000116c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de8b  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001126  00000000  00000000  0001f5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fca1  00000000  00000000  000206d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007037a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000703d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000724 	.word	0x08000724

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000724 	.word	0x08000724

080001d4 <main>:
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	//CONFIGURING INPUT/OUTPUT PINS AND MODES
	GPIO_Init('B', 3, INPUT, PULL_UP);
 80001da:	2301      	movs	r3, #1
 80001dc:	2200      	movs	r2, #0
 80001de:	2103      	movs	r1, #3
 80001e0:	2042      	movs	r0, #66	; 0x42
 80001e2:	f000 f889 	bl	80002f8 <GPIO_Init>
	GPIO_Init('B', 5, OUTPUT, PUSH_PULL);
 80001e6:	2300      	movs	r3, #0
 80001e8:	2201      	movs	r2, #1
 80001ea:	2105      	movs	r1, #5
 80001ec:	2042      	movs	r0, #66	; 0x42
 80001ee:	f000 f883 	bl	80002f8 <GPIO_Init>
	GPIO_Init('B', 6, OUTPUT, PUSH_PULL);
 80001f2:	2300      	movs	r3, #0
 80001f4:	2201      	movs	r2, #1
 80001f6:	2106      	movs	r1, #6
 80001f8:	2042      	movs	r0, #66	; 0x42
 80001fa:	f000 f87d 	bl	80002f8 <GPIO_Init>
	GPIO_Init('B', 7, OUTPUT, PUSH_PULL);
 80001fe:	2300      	movs	r3, #0
 8000200:	2201      	movs	r2, #1
 8000202:	2107      	movs	r1, #7
 8000204:	2042      	movs	r0, #66	; 0x42
 8000206:	f000 f877 	bl	80002f8 <GPIO_Init>
	int delay = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
	int colors = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	603b      	str	r3, [r7, #0]
	while (1) {
		if (GPIO_ReadPin('B', 3) == NOK) { //check if the button is not Pressed (default 1 active low  (Pressed:0, Not pressed :1))
 8000212:	2103      	movs	r1, #3
 8000214:	2042      	movs	r0, #66	; 0x42
 8000216:	f000 fa07 	bl	8000628 <GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b01      	cmp	r3, #1
 800021e:	d1f8      	bne.n	8000212 <main+0x3e>
			for (delay = 0; delay <= 2000; delay++) {
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	e002      	b.n	800022c <main+0x58>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	3301      	adds	r3, #1
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000232:	ddf8      	ble.n	8000226 <main+0x52>
			}
			if (GPIO_ReadPin('B', 3) == OK) { //check if the button is Pressed
 8000234:	2103      	movs	r1, #3
 8000236:	2042      	movs	r0, #66	; 0x42
 8000238:	f000 f9f6 	bl	8000628 <GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d1e7      	bne.n	8000212 <main+0x3e>
				colors += 1;
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	603b      	str	r3, [r7, #0]
				GPIO_WritePin('B', 5, colors&1);
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	461a      	mov	r2, r3
 8000250:	2105      	movs	r1, #5
 8000252:	2042      	movs	r0, #66	; 0x42
 8000254:	f000 f976 	bl	8000544 <GPIO_WritePin>
				GPIO_WritePin('B', 6, (colors>>1)&1);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	105b      	asrs	r3, r3, #1
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	461a      	mov	r2, r3
 8000262:	2106      	movs	r1, #6
 8000264:	2042      	movs	r0, #66	; 0x42
 8000266:	f000 f96d 	bl	8000544 <GPIO_WritePin>
				GPIO_WritePin('B', 7, (colors>>2)&1);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	109b      	asrs	r3, r3, #2
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	461a      	mov	r2, r3
 8000274:	2107      	movs	r1, #7
 8000276:	2042      	movs	r0, #66	; 0x42
 8000278:	f000 f964 	bl	8000544 <GPIO_WritePin>
		if (GPIO_ReadPin('B', 3) == NOK) { //check if the button is not Pressed (default 1 active low  (Pressed:0, Not pressed :1))
 800027c:	e7c9      	b.n	8000212 <main+0x3e>
	...

08000280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SystemInit+0x20>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <SystemInit+0x20>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002aa:	490e      	ldr	r1, [pc, #56]	; (80002e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002c0:	4c0b      	ldr	r4, [pc, #44]	; (80002f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002ce:	f7ff ffd7 	bl	8000280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d2:	f000 fa03 	bl	80006dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002d6:	f7ff ff7d 	bl	80001d4 <main>
  bx  lr    
 80002da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000744 	.word	0x08000744
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>
	...

080002f8 <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init(char Port, unsigned int PIN_NO, unsigned int PIN_Dir,
		unsigned int Default_State) {
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60b9      	str	r1, [r7, #8]
 8000300:	607a      	str	r2, [r7, #4]
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	4603      	mov	r3, r0
 8000306:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port) {
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	2b41      	cmp	r3, #65	; 0x41
 800030c:	d003      	beq.n	8000316 <GPIO_Init+0x1e>
 800030e:	2b42      	cmp	r3, #66	; 0x42
 8000310:	f000 8085 	beq.w	800041e <GPIO_Init+0x126>
		}				// end switch
		//end switch
		break;
	}

}
 8000314:	e10a      	b.n	800052c <GPIO_Init+0x234>
		RCC_AHB1ENR |= (0x01 << 0);
 8000316:	4b88      	ldr	r3, [pc, #544]	; (8000538 <GPIO_Init+0x240>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a87      	ldr	r2, [pc, #540]	; (8000538 <GPIO_Init+0x240>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b03      	cmp	r3, #3
 8000326:	f200 80fe 	bhi.w	8000526 <GPIO_Init+0x22e>
 800032a:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <GPIO_Init+0x38>)
 800032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000330:	08000341 	.word	0x08000341
 8000334:	08000399 	.word	0x08000399
 8000338:	080003ed 	.word	0x080003ed
 800033c:	08000405 	.word	0x08000405
			GPIOA_MODER &= ~(0x03 << 2 * PIN_NO);
 8000340:	4b7e      	ldr	r3, [pc, #504]	; (800053c <GPIO_Init+0x244>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	2103      	movs	r1, #3
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	4611      	mov	r1, r2
 8000352:	4a7a      	ldr	r2, [pc, #488]	; (800053c <GPIO_Init+0x244>)
 8000354:	400b      	ands	r3, r1
 8000356:	6013      	str	r3, [r2, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d003      	beq.n	8000366 <GPIO_Init+0x6e>
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b10      	cmp	r3, #16
 8000362:	d00c      	beq.n	800037e <GPIO_Init+0x86>
			break;
 8000364:	e05a      	b.n	800041c <GPIO_Init+0x124>
				GPIOA_PUPDR |= (0x01 << 2 * PIN_NO);
 8000366:	4b75      	ldr	r3, [pc, #468]	; (800053c <GPIO_Init+0x244>)
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	68ba      	ldr	r2, [r7, #8]
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a71      	ldr	r2, [pc, #452]	; (800053c <GPIO_Init+0x244>)
 8000378:	430b      	orrs	r3, r1
 800037a:	60d3      	str	r3, [r2, #12]
				break;
 800037c:	e00b      	b.n	8000396 <GPIO_Init+0x9e>
				GPIOA_PUPDR |= (0x10 << 2 * PIN_NO);
 800037e:	4b6f      	ldr	r3, [pc, #444]	; (800053c <GPIO_Init+0x244>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	0052      	lsls	r2, r2, #1
 8000386:	2110      	movs	r1, #16
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	4611      	mov	r1, r2
 800038e:	4a6b      	ldr	r2, [pc, #428]	; (800053c <GPIO_Init+0x244>)
 8000390:	430b      	orrs	r3, r1
 8000392:	60d3      	str	r3, [r2, #12]
				break;
 8000394:	bf00      	nop
			break;
 8000396:	e041      	b.n	800041c <GPIO_Init+0x124>
			GPIOA_MODER |= (0x01 << 2 * PIN_NO);
 8000398:	4b68      	ldr	r3, [pc, #416]	; (800053c <GPIO_Init+0x244>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	68ba      	ldr	r2, [r7, #8]
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	2101      	movs	r1, #1
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4a64      	ldr	r2, [pc, #400]	; (800053c <GPIO_Init+0x244>)
 80003aa:	430b      	orrs	r3, r1
 80003ac:	6013      	str	r3, [r2, #0]
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d003      	beq.n	80003bc <GPIO_Init+0xc4>
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d00c      	beq.n	80003d4 <GPIO_Init+0xdc>
			break;
 80003ba:	e02f      	b.n	800041c <GPIO_Init+0x124>
				GPIOA_OTYPER &= ~(0x01 << PIN_NO);
 80003bc:	4b5f      	ldr	r3, [pc, #380]	; (800053c <GPIO_Init+0x244>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	2101      	movs	r1, #1
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a5b      	ldr	r2, [pc, #364]	; (800053c <GPIO_Init+0x244>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	6053      	str	r3, [r2, #4]
				break;
 80003d2:	e00a      	b.n	80003ea <GPIO_Init+0xf2>
				GPIOA_OTYPER |= (0x01 << PIN_NO);
 80003d4:	4b59      	ldr	r3, [pc, #356]	; (800053c <GPIO_Init+0x244>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	2101      	movs	r1, #1
 80003da:	68ba      	ldr	r2, [r7, #8]
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a56      	ldr	r2, [pc, #344]	; (800053c <GPIO_Init+0x244>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6053      	str	r3, [r2, #4]
				break;
 80003e8:	bf00      	nop
			break;
 80003ea:	e017      	b.n	800041c <GPIO_Init+0x124>
			GPIOA_MODER |= (0x02 << 2 * PIN_NO);
 80003ec:	4b53      	ldr	r3, [pc, #332]	; (800053c <GPIO_Init+0x244>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	2102      	movs	r1, #2
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	4611      	mov	r1, r2
 80003fc:	4a4f      	ldr	r2, [pc, #316]	; (800053c <GPIO_Init+0x244>)
 80003fe:	430b      	orrs	r3, r1
 8000400:	6013      	str	r3, [r2, #0]
			break;
 8000402:	e00b      	b.n	800041c <GPIO_Init+0x124>
			GPIOA_MODER |= (0x03 << 2 * PIN_NO);
 8000404:	4b4d      	ldr	r3, [pc, #308]	; (800053c <GPIO_Init+0x244>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a49      	ldr	r2, [pc, #292]	; (800053c <GPIO_Init+0x244>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6013      	str	r3, [r2, #0]
			break;
 800041a:	bf00      	nop
		break;
 800041c:	e083      	b.n	8000526 <GPIO_Init+0x22e>
		RCC_AHB1ENR |= (0x01 << 1);
 800041e:	4b46      	ldr	r3, [pc, #280]	; (8000538 <GPIO_Init+0x240>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a45      	ldr	r2, [pc, #276]	; (8000538 <GPIO_Init+0x240>)
 8000424:	f043 0302 	orr.w	r3, r3, #2
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d87c      	bhi.n	800052a <GPIO_Init+0x232>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <GPIO_Init+0x140>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000449 	.word	0x08000449
 800043c:	080004a1 	.word	0x080004a1
 8000440:	080004f5 	.word	0x080004f5
 8000444:	0800050d 	.word	0x0800050d
			GPIOB_MODER &= ~(0x03 << 2 * PIN_NO);
 8000448:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <GPIO_Init+0x248>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	2103      	movs	r1, #3
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a39      	ldr	r2, [pc, #228]	; (8000540 <GPIO_Init+0x248>)
 800045c:	400b      	ands	r3, r1
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <GPIO_Init+0x176>
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	2b10      	cmp	r3, #16
 800046a:	d00c      	beq.n	8000486 <GPIO_Init+0x18e>
			break;
 800046c:	e05a      	b.n	8000524 <GPIO_Init+0x22c>
				GPIOB_PUPDR |= (0x01 << 2 * PIN_NO);
 800046e:	4b34      	ldr	r3, [pc, #208]	; (8000540 <GPIO_Init+0x248>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	0052      	lsls	r2, r2, #1
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a30      	ldr	r2, [pc, #192]	; (8000540 <GPIO_Init+0x248>)
 8000480:	430b      	orrs	r3, r1
 8000482:	60d3      	str	r3, [r2, #12]
				break;
 8000484:	e00b      	b.n	800049e <GPIO_Init+0x1a6>
				GPIOB_PUPDR |= (0x10 << 2 * PIN_NO);
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <GPIO_Init+0x248>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	0052      	lsls	r2, r2, #1
 800048e:	2110      	movs	r1, #16
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a2a      	ldr	r2, [pc, #168]	; (8000540 <GPIO_Init+0x248>)
 8000498:	430b      	orrs	r3, r1
 800049a:	60d3      	str	r3, [r2, #12]
				break;
 800049c:	bf00      	nop
			break;
 800049e:	e041      	b.n	8000524 <GPIO_Init+0x22c>
			GPIOB_MODER |= (0x01 << 2 * PIN_NO);
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <GPIO_Init+0x248>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a23      	ldr	r2, [pc, #140]	; (8000540 <GPIO_Init+0x248>)
 80004b2:	430b      	orrs	r3, r1
 80004b4:	6013      	str	r3, [r2, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d003      	beq.n	80004c4 <GPIO_Init+0x1cc>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d00c      	beq.n	80004dc <GPIO_Init+0x1e4>
			break;
 80004c2:	e02f      	b.n	8000524 <GPIO_Init+0x22c>
				GPIOB_OTYPER &= ~(0x01 << PIN_NO);
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <GPIO_Init+0x248>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2101      	movs	r1, #1
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	43d2      	mvns	r2, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <GPIO_Init+0x248>)
 80004d6:	400b      	ands	r3, r1
 80004d8:	6053      	str	r3, [r2, #4]
				break;
 80004da:	e00a      	b.n	80004f2 <GPIO_Init+0x1fa>
				GPIOB_OTYPER |= (0x01 << PIN_NO);
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <GPIO_Init+0x248>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2101      	movs	r1, #1
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <GPIO_Init+0x248>)
 80004ec:	430b      	orrs	r3, r1
 80004ee:	6053      	str	r3, [r2, #4]
				break;
 80004f0:	bf00      	nop
			break;
 80004f2:	e017      	b.n	8000524 <GPIO_Init+0x22c>
			GPIOB_MODER |= (0x02 << 2 * PIN_NO);
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <GPIO_Init+0x248>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	2102      	movs	r1, #2
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <GPIO_Init+0x248>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6013      	str	r3, [r2, #0]
			break;
 800050a:	e00b      	b.n	8000524 <GPIO_Init+0x22c>
			GPIOB_MODER |= (0x03 << 2 * PIN_NO);
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <GPIO_Init+0x248>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	2103      	movs	r1, #3
 8000516:	fa01 f202 	lsl.w	r2, r1, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <GPIO_Init+0x248>)
 800051e:	430b      	orrs	r3, r1
 8000520:	6013      	str	r3, [r2, #0]
			break;
 8000522:	bf00      	nop
		break;
 8000524:	e001      	b.n	800052a <GPIO_Init+0x232>
		break;
 8000526:	bf00      	nop
 8000528:	e000      	b.n	800052c <GPIO_Init+0x234>
		break;
 800052a:	bf00      	nop
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000
 8000540:	40020400 	.word	0x40020400

08000544 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data) {
 8000544:	b480      	push	{r7}
 8000546:	b087      	sub	sp, #28
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch (Port) {
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b41      	cmp	r3, #65	; 0x41
 8000556:	d002      	beq.n	800055e <GPIO_WritePin+0x1a>
 8000558:	2b42      	cmp	r3, #66	; 0x42
 800055a:	d02d      	beq.n	80005b8 <GPIO_WritePin+0x74>
 800055c:	e059      	b.n	8000612 <GPIO_WritePin+0xce>
	case ('A'):
		if ((GPIOA_MODER & (0x03 << 2 * PIN_NO)) >> (2 * PIN_NO) == 1) {
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <GPIO_WritePin+0xdc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	0052      	lsls	r2, r2, #1
 8000566:	2103      	movs	r1, #3
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	401a      	ands	r2, r3
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa22 f303 	lsr.w	r3, r2, r3
 8000576:	2b01      	cmp	r3, #1
 8000578:	d11b      	bne.n	80005b2 <GPIO_WritePin+0x6e>
			if (Data) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00a      	beq.n	8000596 <GPIO_WritePin+0x52>
				GPIOA_ODR |= (1 << PIN_NO);
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <GPIO_WritePin+0xdc>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	2101      	movs	r1, #1
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a24      	ldr	r2, [pc, #144]	; (8000620 <GPIO_WritePin+0xdc>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6153      	str	r3, [r2, #20]
 8000594:	e00a      	b.n	80005ac <GPIO_WritePin+0x68>
			} else {
				GPIOA_ODR &= ~(1 << PIN_NO);
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <GPIO_WritePin+0xdc>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	2101      	movs	r1, #1
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <GPIO_WritePin+0xdc>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	6153      	str	r3, [r2, #20]
			}
			result = OK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	75fb      	strb	r3, [r7, #23]
		} else {
			result = NOK;
		}
		break;
 80005b0:	e02f      	b.n	8000612 <GPIO_WritePin+0xce>
			result = NOK;
 80005b2:	2301      	movs	r3, #1
 80005b4:	75fb      	strb	r3, [r7, #23]
		break;
 80005b6:	e02c      	b.n	8000612 <GPIO_WritePin+0xce>
	case ('B'):
		if ((GPIOB_MODER & (0x01 << 2 * PIN_NO)) >> (2 * PIN_NO)) {
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <GPIO_WritePin+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	0052      	lsls	r2, r2, #1
 80005c0:	2101      	movs	r1, #1
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	401a      	ands	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	fa22 f303 	lsr.w	r3, r2, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d01b      	beq.n	800060c <GPIO_WritePin+0xc8>
			if (Data) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00a      	beq.n	80005f0 <GPIO_WritePin+0xac>
				GPIOB_ODR |= (1 << PIN_NO);
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <GPIO_WritePin+0xe0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	2101      	movs	r1, #1
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <GPIO_WritePin+0xe0>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	e00a      	b.n	8000606 <GPIO_WritePin+0xc2>
			} else {
				GPIOB_ODR &= ~(1 << PIN_NO);
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <GPIO_WritePin+0xe0>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	2101      	movs	r1, #1
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	43d2      	mvns	r2, r2
 80005fe:	4611      	mov	r1, r2
 8000600:	4a08      	ldr	r2, [pc, #32]	; (8000624 <GPIO_WritePin+0xe0>)
 8000602:	400b      	ands	r3, r1
 8000604:	6153      	str	r3, [r2, #20]
			}
			result = OK;
 8000606:	2300      	movs	r3, #0
 8000608:	75fb      	strb	r3, [r7, #23]
		} else {
			result = NOK;
		}

		break;
 800060a:	e001      	b.n	8000610 <GPIO_WritePin+0xcc>
			result = NOK;
 800060c:	2301      	movs	r3, #1
 800060e:	75fb      	strb	r3, [r7, #23]
		break;
 8000610:	bf00      	nop

	}				// end switch

	return result;
 8000612:	7dfb      	ldrb	r3, [r7, #23]
}
 8000614:	4618      	mov	r0, r3
 8000616:	371c      	adds	r7, #28
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400

08000628 <GPIO_ReadPin>:
unsigned char GPIO_ReadPin(char Port, unsigned int PIN_NO) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	unsigned char result;
	switch (Port) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b41      	cmp	r3, #65	; 0x41
 8000638:	d002      	beq.n	8000640 <GPIO_ReadPin+0x18>
 800063a:	2b42      	cmp	r3, #66	; 0x42
 800063c:	d020      	beq.n	8000680 <GPIO_ReadPin+0x58>
			}
		}
		break;

	default:
		break;
 800063e:	e042      	b.n	80006c6 <GPIO_ReadPin+0x9e>
		if ((GPIOA_MODER & (0x03 << 2 * PIN_NO)) >> (2 * PIN_NO) == 0) {
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <GPIO_ReadPin+0xac>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	0052      	lsls	r2, r2, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	401a      	ands	r2, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	fa22 f303 	lsr.w	r3, r2, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d131      	bne.n	80006c0 <GPIO_ReadPin+0x98>
			if ((GPIOA_IDR & (0x01 << PIN_NO)) >> PIN_NO == 1) {
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <GPIO_ReadPin+0xac>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	2101      	movs	r1, #1
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	401a      	ands	r2, r3
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	fa22 f303 	lsr.w	r3, r2, r3
 8000670:	2b01      	cmp	r3, #1
 8000672:	d102      	bne.n	800067a <GPIO_ReadPin+0x52>
				result = NOK;
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
		break;
 8000678:	e022      	b.n	80006c0 <GPIO_ReadPin+0x98>
				result = OK;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
		break;
 800067e:	e01f      	b.n	80006c0 <GPIO_ReadPin+0x98>
		if ((GPIOB_MODER & (0x01 << 2 * PIN_NO)) >> (2 * PIN_NO) == 0) {
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <GPIO_ReadPin+0xb0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	401a      	ands	r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	fa22 f303 	lsr.w	r3, r2, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d113      	bne.n	80006c4 <GPIO_ReadPin+0x9c>
			if ((GPIOB_IDR & (0x01 << PIN_NO)) >> PIN_NO == 1) {
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <GPIO_ReadPin+0xb0>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	2101      	movs	r1, #1
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	401a      	ands	r2, r3
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	fa22 f303 	lsr.w	r3, r2, r3
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d102      	bne.n	80006ba <GPIO_ReadPin+0x92>
				result = NOK;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
		break;
 80006b8:	e004      	b.n	80006c4 <GPIO_ReadPin+0x9c>
				result = OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
		break;
 80006be:	e001      	b.n	80006c4 <GPIO_ReadPin+0x9c>
		break;
 80006c0:	bf00      	nop
 80006c2:	e000      	b.n	80006c6 <GPIO_ReadPin+0x9e>
		break;
 80006c4:	bf00      	nop
	}
	return result;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400

080006dc <__libc_init_array>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	4d0d      	ldr	r5, [pc, #52]	; (8000714 <__libc_init_array+0x38>)
 80006e0:	4c0d      	ldr	r4, [pc, #52]	; (8000718 <__libc_init_array+0x3c>)
 80006e2:	1b64      	subs	r4, r4, r5
 80006e4:	10a4      	asrs	r4, r4, #2
 80006e6:	2600      	movs	r6, #0
 80006e8:	42a6      	cmp	r6, r4
 80006ea:	d109      	bne.n	8000700 <__libc_init_array+0x24>
 80006ec:	4d0b      	ldr	r5, [pc, #44]	; (800071c <__libc_init_array+0x40>)
 80006ee:	4c0c      	ldr	r4, [pc, #48]	; (8000720 <__libc_init_array+0x44>)
 80006f0:	f000 f818 	bl	8000724 <_init>
 80006f4:	1b64      	subs	r4, r4, r5
 80006f6:	10a4      	asrs	r4, r4, #2
 80006f8:	2600      	movs	r6, #0
 80006fa:	42a6      	cmp	r6, r4
 80006fc:	d105      	bne.n	800070a <__libc_init_array+0x2e>
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f855 3b04 	ldr.w	r3, [r5], #4
 8000704:	4798      	blx	r3
 8000706:	3601      	adds	r6, #1
 8000708:	e7ee      	b.n	80006e8 <__libc_init_array+0xc>
 800070a:	f855 3b04 	ldr.w	r3, [r5], #4
 800070e:	4798      	blx	r3
 8000710:	3601      	adds	r6, #1
 8000712:	e7f2      	b.n	80006fa <__libc_init_array+0x1e>
 8000714:	0800073c 	.word	0x0800073c
 8000718:	0800073c 	.word	0x0800073c
 800071c:	0800073c 	.word	0x0800073c
 8000720:	08000740 	.word	0x08000740

08000724 <_init>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	bf00      	nop
 8000728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800072a:	bc08      	pop	{r3}
 800072c:	469e      	mov	lr, r3
 800072e:	4770      	bx	lr

08000730 <_fini>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr
