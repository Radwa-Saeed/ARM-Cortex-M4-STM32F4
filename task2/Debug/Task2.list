
Task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000404  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000404  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000098d  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000022a  00000000  00000000  00010dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  000110a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a60  00000000  00000000  0001ee07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb03  00000000  00000000  0001f867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f36a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e4 	.word	0x080003e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003e4 	.word	0x080003e4

080001d4 <main>:
#include "stm32f401cc_interface.h"
int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1 << 1); 		// Enable PORT B
 80001da:	4b50      	ldr	r3, [pc, #320]	; (800031c <main+0x148>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a4f      	ldr	r2, [pc, #316]	; (800031c <main+0x148>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
	//GPIOB_MODER&=~(3<<6); 		// Config PORT B PIN 3 as I/P (DEFAULT)
	GPIOB_MODER |= (0x01 << 10); 	// Config PORT B PIN 5 as O/P
 80001e6:	4b4e      	ldr	r3, [pc, #312]	; (8000320 <main+0x14c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a4d      	ldr	r2, [pc, #308]	; (8000320 <main+0x14c>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (0x01 << 12); 	// Config PORT B PIN 6 as O/P
 80001f2:	4b4b      	ldr	r3, [pc, #300]	; (8000320 <main+0x14c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a4a      	ldr	r2, [pc, #296]	; (8000320 <main+0x14c>)
 80001f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (0x01 << 14); 	// Config PORT B PIN 7 as O/P
 80001fe:	4b48      	ldr	r3, [pc, #288]	; (8000320 <main+0x14c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a47      	ldr	r2, [pc, #284]	; (8000320 <main+0x14c>)
 8000204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000208:	6013      	str	r3, [r2, #0]
	//GPIOB_OTYPER&=~(1<<5); 		// Config O/P as Push-Pull (DEFAULT)
	GPIOB_PUPDR |= (0x01 << 6); 	// Config I/P as Pull-Up Res
 800020a:	4b45      	ldr	r3, [pc, #276]	; (8000320 <main+0x14c>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a44      	ldr	r2, [pc, #272]	; (8000320 <main+0x14c>)
 8000210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000214:	60d3      	str	r3, [r2, #12]
	int delay = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
	int colors = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	603b      	str	r3, [r7, #0]
	while (1) {
		if ((GPIOB_IDR & (1 << 3)) == 8) { //check if the button is not Pressed (default 1 active low  (Pressed:0, Not pressed :1))
 800021e:	4b40      	ldr	r3, [pc, #256]	; (8000320 <main+0x14c>)
 8000220:	691b      	ldr	r3, [r3, #16]
 8000222:	f003 0308 	and.w	r3, r3, #8
 8000226:	2b08      	cmp	r3, #8
 8000228:	d176      	bne.n	8000318 <main+0x144>
			for (delay = 0; delay <= 2000; delay++) {
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	e002      	b.n	8000236 <main+0x62>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3301      	adds	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800023c:	ddf8      	ble.n	8000230 <main+0x5c>
			}
			if ((GPIOB_IDR & (1 << 3)) == 0) { //check if the button is Pressed
 800023e:	4b38      	ldr	r3, [pc, #224]	; (8000320 <main+0x14c>)
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	f003 0308 	and.w	r3, r3, #8
 8000246:	2b00      	cmp	r3, #0
 8000248:	d166      	bne.n	8000318 <main+0x144>
				colors += 1;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	3b01      	subs	r3, #1
 8000254:	2b07      	cmp	r3, #7
 8000256:	d8e2      	bhi.n	800021e <main+0x4a>
 8000258:	a201      	add	r2, pc, #4	; (adr r2, 8000260 <main+0x8c>)
 800025a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025e:	bf00      	nop
 8000260:	08000281 	.word	0x08000281
 8000264:	08000295 	.word	0x08000295
 8000268:	080002a9 	.word	0x080002a9
 800026c:	080002bd 	.word	0x080002bd
 8000270:	080002d1 	.word	0x080002d1
 8000274:	080002e5 	.word	0x080002e5
 8000278:	080002f9 	.word	0x080002f9
 800027c:	0800030d 	.word	0x0800030d
				switch (colors) {
				case 1: {
					GPIOB_ODR = 0;
 8000280:	4b27      	ldr	r3, [pc, #156]	; (8000320 <main+0x14c>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= (1 << 5);
 8000286:	4b26      	ldr	r3, [pc, #152]	; (8000320 <main+0x14c>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <main+0x14c>)
 800028c:	f043 0320 	orr.w	r3, r3, #32
 8000290:	6153      	str	r3, [r2, #20]
					break;
 8000292:	e042      	b.n	800031a <main+0x146>
				}
				case 2: {
					GPIOB_ODR = 0;
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <main+0x14c>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= (1 << 6);
 800029a:	4b21      	ldr	r3, [pc, #132]	; (8000320 <main+0x14c>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a20      	ldr	r2, [pc, #128]	; (8000320 <main+0x14c>)
 80002a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a4:	6153      	str	r3, [r2, #20]
					break;
 80002a6:	e038      	b.n	800031a <main+0x146>
				}
				case 3: {
					GPIOB_ODR = 0;
 80002a8:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <main+0x14c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= ((1 << 5) | (1 << 6));
 80002ae:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <main+0x14c>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <main+0x14c>)
 80002b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002b8:	6153      	str	r3, [r2, #20]
					break;
 80002ba:	e02e      	b.n	800031a <main+0x146>
				}
				case 4: {
					GPIOB_ODR = 0;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <main+0x14c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= (1 << 7);
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <main+0x14c>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a16      	ldr	r2, [pc, #88]	; (8000320 <main+0x14c>)
 80002c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002cc:	6153      	str	r3, [r2, #20]
					break;
 80002ce:	e024      	b.n	800031a <main+0x146>
				}
				case 5: {
					GPIOB_ODR = 0;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <main+0x14c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= ((1 << 5) | (1 << 7));
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <main+0x14c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <main+0x14c>)
 80002dc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002e0:	6153      	str	r3, [r2, #20]
					break;
 80002e2:	e01a      	b.n	800031a <main+0x146>
				}
				case 6: {
					GPIOB_ODR = 0;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <main+0x14c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= ((1 << 6) | (1 << 7));
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <main+0x14c>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <main+0x14c>)
 80002f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002f4:	6153      	str	r3, [r2, #20]
					break;
 80002f6:	e010      	b.n	800031a <main+0x146>
				}
				case 7: {
					GPIOB_ODR = 0;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <main+0x14c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
					GPIOB_ODR |= ((1 << 5) | (1 << 6) | (1 << 7));
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <main+0x14c>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <main+0x14c>)
 8000304:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000308:	6153      	str	r3, [r2, #20]
					break;
 800030a:	e006      	b.n	800031a <main+0x146>
				}
				case 8: {
					GPIOB_ODR = 0;
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <main+0x14c>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
					colors = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	603b      	str	r3, [r7, #0]
 8000316:	e782      	b.n	800021e <main+0x4a>
				}
				}
			}
 8000318:	bf00      	nop
		if ((GPIOB_IDR & (1 << 3)) == 8) { //check if the button is not Pressed (default 1 active low  (Pressed:0, Not pressed :1))
 800031a:	e780      	b.n	800021e <main+0x4a>
 800031c:	40023800 	.word	0x40023800
 8000320:	40020400 	.word	0x40020400

08000324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SystemInit+0x20>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <SystemInit+0x20>)
 8000330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000364:	4c0b      	ldr	r4, [pc, #44]	; (8000394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000372:	f7ff ffd7 	bl	8000324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037a:	f7ff ff2b 	bl	80001d4 <main>
  bx  lr    
 800037e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000380:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	; (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	; (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	; (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
