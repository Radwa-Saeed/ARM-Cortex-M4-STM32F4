
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000414  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a8  080005b0  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a8  080005a8  000105b0  2**0
                  CONTENTS
  4 .ARM          00000000  080005a8  080005a8  000105b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a8  080005b0  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ac  080005ac  000105ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b6b  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000031a  00000000  00000000  0001114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00011468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00011500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de7f  00000000  00000000  00011560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ff8  00000000  00000000  0001f3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fc50  00000000  00000000  000203d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00070027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000114  00000000  00000000  0007007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000590 	.word	0x08000590

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000590 	.word	0x08000590

080001d4 <main>:
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"


int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	//initializing output pins
	GPIO_Init('A', 0, OUTPUT, PUSH_PULL);
 80001da:	2300      	movs	r3, #0
 80001dc:	2201      	movs	r2, #1
 80001de:	2100      	movs	r1, #0
 80001e0:	2041      	movs	r0, #65	; 0x41
 80001e2:	f000 f85d 	bl	80002a0 <GPIO_Init>
	while (1) {
		// TURN ON
		GPIO_WritePin('A', 0, 1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2100      	movs	r1, #0
 80001ea:	2041      	movs	r0, #65	; 0x41
 80001ec:	f000 f93a 	bl	8000464 <GPIO_WritePin>
		//delay
			for (int j = 0; j < 1000000; j++) {}
 80001f0:	2300      	movs	r3, #0
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	e002      	b.n	80001fc <main+0x28>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3301      	adds	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a09      	ldr	r2, [pc, #36]	; (8000224 <main+0x50>)
 8000200:	4293      	cmp	r3, r2
 8000202:	ddf8      	ble.n	80001f6 <main+0x22>
		// TURN OFF
		GPIO_WritePin('A', 0, 0);
 8000204:	2200      	movs	r2, #0
 8000206:	2100      	movs	r1, #0
 8000208:	2041      	movs	r0, #65	; 0x41
 800020a:	f000 f92b 	bl	8000464 <GPIO_WritePin>
		//delay
			for (int j = 0; j < 1000000; j++) {}
 800020e:	2300      	movs	r3, #0
 8000210:	603b      	str	r3, [r7, #0]
 8000212:	e002      	b.n	800021a <main+0x46>
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	603b      	str	r3, [r7, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	4a01      	ldr	r2, [pc, #4]	; (8000224 <main+0x50>)
 800021e:	4293      	cmp	r3, r2
 8000220:	ddf8      	ble.n	8000214 <main+0x40>
		GPIO_WritePin('A', 0, 1);
 8000222:	e7e0      	b.n	80001e6 <main+0x12>
 8000224:	000f423f 	.word	0x000f423f

08000228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SystemInit+0x20>)
 800022e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000232:	4a05      	ldr	r2, [pc, #20]	; (8000248 <SystemInit+0x20>)
 8000234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800024c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000252:	490e      	ldr	r1, [pc, #56]	; (800028c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000268:	4c0b      	ldr	r4, [pc, #44]	; (8000298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000276:	f7ff ffd7 	bl	8000228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800027a:	f000 f965 	bl	8000548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800027e:	f7ff ffa9 	bl	80001d4 <main>
  bx  lr    
 8000282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000284:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	080005b0 	.word	0x080005b0
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	2000001c 	.word	0x2000001c

0800029c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC_IRQHandler>
	...

080002a0 <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60b9      	str	r1, [r7, #8]
 80002a8:	607a      	str	r2, [r7, #4]
 80002aa:	603b      	str	r3, [r7, #0]
 80002ac:	4603      	mov	r3, r0
 80002ae:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b41      	cmp	r3, #65	; 0x41
 80002b4:	d002      	beq.n	80002bc <GPIO_Init+0x1c>
 80002b6:	2b42      	cmp	r3, #66	; 0x42
 80002b8:	d064      	beq.n	8000384 <GPIO_Init+0xe4>
					break;
				}//end switch
		break;
	}

}
 80002ba:	e0c7      	b.n	800044c <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<0);
 80002bc:	4b66      	ldr	r3, [pc, #408]	; (8000458 <GPIO_Init+0x1b8>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	4a65      	ldr	r2, [pc, #404]	; (8000458 <GPIO_Init+0x1b8>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6313      	str	r3, [r2, #48]	; 0x30
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d83b      	bhi.n	8000346 <GPIO_Init+0xa6>
 80002ce:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <GPIO_Init+0x34>)
 80002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d4:	080002e5 	.word	0x080002e5
 80002d8:	080002ff 	.word	0x080002ff
 80002dc:	08000317 	.word	0x08000317
 80002e0:	0800032f 	.word	0x0800032f
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 80002e4:	4b5d      	ldr	r3, [pc, #372]	; (800045c <GPIO_Init+0x1bc>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68ba      	ldr	r2, [r7, #8]
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	2103      	movs	r1, #3
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a59      	ldr	r2, [pc, #356]	; (800045c <GPIO_Init+0x1bc>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
					break;
 80002fc:	e023      	b.n	8000346 <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 80002fe:	4b57      	ldr	r3, [pc, #348]	; (800045c <GPIO_Init+0x1bc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	2101      	movs	r1, #1
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	4611      	mov	r1, r2
 800030e:	4a53      	ldr	r2, [pc, #332]	; (800045c <GPIO_Init+0x1bc>)
 8000310:	430b      	orrs	r3, r1
 8000312:	6013      	str	r3, [r2, #0]
					break;
 8000314:	e017      	b.n	8000346 <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 8000316:	4b51      	ldr	r3, [pc, #324]	; (800045c <GPIO_Init+0x1bc>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	68ba      	ldr	r2, [r7, #8]
 800031c:	0052      	lsls	r2, r2, #1
 800031e:	2102      	movs	r1, #2
 8000320:	fa01 f202 	lsl.w	r2, r1, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a4d      	ldr	r2, [pc, #308]	; (800045c <GPIO_Init+0x1bc>)
 8000328:	430b      	orrs	r3, r1
 800032a:	6013      	str	r3, [r2, #0]
					break;
 800032c:	e00b      	b.n	8000346 <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 800032e:	4b4b      	ldr	r3, [pc, #300]	; (800045c <GPIO_Init+0x1bc>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	2103      	movs	r1, #3
 8000338:	fa01 f202 	lsl.w	r2, r1, r2
 800033c:	4611      	mov	r1, r2
 800033e:	4a47      	ldr	r2, [pc, #284]	; (800045c <GPIO_Init+0x1bc>)
 8000340:	430b      	orrs	r3, r1
 8000342:	6013      	str	r3, [r2, #0]
					break;
 8000344:	bf00      	nop
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d003      	beq.n	8000354 <GPIO_Init+0xb4>
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d00c      	beq.n	800036c <GPIO_Init+0xcc>
		break;
 8000352:	e07b      	b.n	800044c <GPIO_Init+0x1ac>
							GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 8000354:	4b41      	ldr	r3, [pc, #260]	; (800045c <GPIO_Init+0x1bc>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	2101      	movs	r1, #1
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4611      	mov	r1, r2
 8000364:	4a3d      	ldr	r2, [pc, #244]	; (800045c <GPIO_Init+0x1bc>)
 8000366:	400b      	ands	r3, r1
 8000368:	6053      	str	r3, [r2, #4]
					break;
 800036a:	e00a      	b.n	8000382 <GPIO_Init+0xe2>
							GPIOA_OTYPER |= (0x01<<PIN_NO);
 800036c:	4b3b      	ldr	r3, [pc, #236]	; (800045c <GPIO_Init+0x1bc>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	2101      	movs	r1, #1
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	4611      	mov	r1, r2
 800037a:	4a38      	ldr	r2, [pc, #224]	; (800045c <GPIO_Init+0x1bc>)
 800037c:	430b      	orrs	r3, r1
 800037e:	6053      	str	r3, [r2, #4]
					break;
 8000380:	bf00      	nop
		break;
 8000382:	e063      	b.n	800044c <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<1);
 8000384:	4b34      	ldr	r3, [pc, #208]	; (8000458 <GPIO_Init+0x1b8>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <GPIO_Init+0x1b8>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d83b      	bhi.n	800040e <GPIO_Init+0x16e>
 8000396:	a201      	add	r2, pc, #4	; (adr r2, 800039c <GPIO_Init+0xfc>)
 8000398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039c:	080003ad 	.word	0x080003ad
 80003a0:	080003c7 	.word	0x080003c7
 80003a4:	080003df 	.word	0x080003df
 80003a8:	080003f7 	.word	0x080003f7
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <GPIO_Init+0x1c0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	68ba      	ldr	r2, [r7, #8]
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2103      	movs	r1, #3
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	43d2      	mvns	r2, r2
 80003bc:	4611      	mov	r1, r2
 80003be:	4a28      	ldr	r2, [pc, #160]	; (8000460 <GPIO_Init+0x1c0>)
 80003c0:	400b      	ands	r3, r1
 80003c2:	6013      	str	r3, [r2, #0]
					break;
 80003c4:	e023      	b.n	800040e <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 80003c6:	4b26      	ldr	r3, [pc, #152]	; (8000460 <GPIO_Init+0x1c0>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	0052      	lsls	r2, r2, #1
 80003ce:	2101      	movs	r1, #1
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a22      	ldr	r2, [pc, #136]	; (8000460 <GPIO_Init+0x1c0>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	6013      	str	r3, [r2, #0]
					break;
 80003dc:	e017      	b.n	800040e <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <GPIO_Init+0x1c0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	2102      	movs	r1, #2
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <GPIO_Init+0x1c0>)
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6013      	str	r3, [r2, #0]
					break;
 80003f4:	e00b      	b.n	800040e <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <GPIO_Init+0x1c0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	68ba      	ldr	r2, [r7, #8]
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f202 	lsl.w	r2, r1, r2
 8000404:	4611      	mov	r1, r2
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <GPIO_Init+0x1c0>)
 8000408:	430b      	orrs	r3, r1
 800040a:	6013      	str	r3, [r2, #0]
					break;
 800040c:	bf00      	nop
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d003      	beq.n	800041c <GPIO_Init+0x17c>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d00c      	beq.n	8000434 <GPIO_Init+0x194>
		break;
 800041a:	e016      	b.n	800044a <GPIO_Init+0x1aa>
							GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <GPIO_Init+0x1c0>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2101      	movs	r1, #1
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	43d2      	mvns	r2, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <GPIO_Init+0x1c0>)
 800042e:	400b      	ands	r3, r1
 8000430:	6053      	str	r3, [r2, #4]
					break;
 8000432:	e00a      	b.n	800044a <GPIO_Init+0x1aa>
							GPIOB_OTYPER |= (0x01<<PIN_NO);
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <GPIO_Init+0x1c0>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	2101      	movs	r1, #1
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a07      	ldr	r2, [pc, #28]	; (8000460 <GPIO_Init+0x1c0>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6053      	str	r3, [r2, #4]
					break;
 8000448:	bf00      	nop
		break;
 800044a:	bf00      	nop
}
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40023800 	.word	0x40023800
 800045c:	40020000 	.word	0x40020000
 8000460:	40020400 	.word	0x40020400

08000464 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data)
{
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch(Port)
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	2b41      	cmp	r3, #65	; 0x41
 8000476:	d002      	beq.n	800047e <GPIO_WritePin+0x1a>
 8000478:	2b42      	cmp	r3, #66	; 0x42
 800047a:	d02d      	beq.n	80004d8 <GPIO_WritePin+0x74>
 800047c:	e059      	b.n	8000532 <GPIO_WritePin+0xce>
	{
		case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 800047e:	4b30      	ldr	r3, [pc, #192]	; (8000540 <GPIO_WritePin+0xdc>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	2103      	movs	r1, #3
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	401a      	ands	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	fa22 f303 	lsr.w	r3, r2, r3
 8000496:	2b01      	cmp	r3, #1
 8000498:	d11b      	bne.n	80004d2 <GPIO_WritePin+0x6e>
			{
			     if(Data)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00a      	beq.n	80004b6 <GPIO_WritePin+0x52>
			     {
			    	 GPIOA_ODR |= (1<<PIN_NO);
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <GPIO_WritePin+0xdc>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	2101      	movs	r1, #1
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a24      	ldr	r2, [pc, #144]	; (8000540 <GPIO_WritePin+0xdc>)
 80004b0:	430b      	orrs	r3, r1
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	e00a      	b.n	80004cc <GPIO_WritePin+0x68>
			     }
			     else
			     {
			    	 GPIOA_ODR &= ~(1<<PIN_NO);
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <GPIO_WritePin+0xdc>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	2101      	movs	r1, #1
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a1e      	ldr	r2, [pc, #120]	; (8000540 <GPIO_WritePin+0xdc>)
 80004c8:	400b      	ands	r3, r1
 80004ca:	6153      	str	r3, [r2, #20]
			     }
				result = OK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				result = NOK;
			}
		break;
 80004d0:	e02f      	b.n	8000532 <GPIO_WritePin+0xce>
				result = NOK;
 80004d2:	2301      	movs	r3, #1
 80004d4:	75fb      	strb	r3, [r7, #23]
		break;
 80004d6:	e02c      	b.n	8000532 <GPIO_WritePin+0xce>
		case('B'):
				if((GPIOB_MODER & (0x01 << 2*PIN_NO))>> (2*PIN_NO))
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <GPIO_WritePin+0xe0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	0052      	lsls	r2, r2, #1
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	401a      	ands	r2, r3
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	fa22 f303 	lsr.w	r3, r2, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d01b      	beq.n	800052c <GPIO_WritePin+0xc8>
				{
					 if(Data)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d00a      	beq.n	8000510 <GPIO_WritePin+0xac>
					 {
						 GPIOB_ODR |= (1<<PIN_NO);
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <GPIO_WritePin+0xe0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	2101      	movs	r1, #1
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <GPIO_WritePin+0xe0>)
 800050a:	430b      	orrs	r3, r1
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	e00a      	b.n	8000526 <GPIO_WritePin+0xc2>
					 }
					 else
					 {
						 GPIOB_ODR &= ~(1<<PIN_NO);
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <GPIO_WritePin+0xe0>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	2101      	movs	r1, #1
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <GPIO_WritePin+0xe0>)
 8000522:	400b      	ands	r3, r1
 8000524:	6153      	str	r3, [r2, #20]
					 }
					result = OK;
 8000526:	2300      	movs	r3, #0
 8000528:	75fb      	strb	r3, [r7, #23]
				else
				{
					result = NOK;
				}

		break;
 800052a:	e001      	b.n	8000530 <GPIO_WritePin+0xcc>
					result = NOK;
 800052c:	2301      	movs	r3, #1
 800052e:	75fb      	strb	r3, [r7, #23]
		break;
 8000530:	bf00      	nop

	}// end switch

	return result;
 8000532:	7dfb      	ldrb	r3, [r7, #23]
}
 8000534:	4618      	mov	r0, r3
 8000536:	371c      	adds	r7, #28
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40020000 	.word	0x40020000
 8000544:	40020400 	.word	0x40020400

08000548 <__libc_init_array>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	4d0d      	ldr	r5, [pc, #52]	; (8000580 <__libc_init_array+0x38>)
 800054c:	4c0d      	ldr	r4, [pc, #52]	; (8000584 <__libc_init_array+0x3c>)
 800054e:	1b64      	subs	r4, r4, r5
 8000550:	10a4      	asrs	r4, r4, #2
 8000552:	2600      	movs	r6, #0
 8000554:	42a6      	cmp	r6, r4
 8000556:	d109      	bne.n	800056c <__libc_init_array+0x24>
 8000558:	4d0b      	ldr	r5, [pc, #44]	; (8000588 <__libc_init_array+0x40>)
 800055a:	4c0c      	ldr	r4, [pc, #48]	; (800058c <__libc_init_array+0x44>)
 800055c:	f000 f818 	bl	8000590 <_init>
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	10a4      	asrs	r4, r4, #2
 8000564:	2600      	movs	r6, #0
 8000566:	42a6      	cmp	r6, r4
 8000568:	d105      	bne.n	8000576 <__libc_init_array+0x2e>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000570:	4798      	blx	r3
 8000572:	3601      	adds	r6, #1
 8000574:	e7ee      	b.n	8000554 <__libc_init_array+0xc>
 8000576:	f855 3b04 	ldr.w	r3, [r5], #4
 800057a:	4798      	blx	r3
 800057c:	3601      	adds	r6, #1
 800057e:	e7f2      	b.n	8000566 <__libc_init_array+0x1e>
 8000580:	080005a8 	.word	0x080005a8
 8000584:	080005a8 	.word	0x080005a8
 8000588:	080005a8 	.word	0x080005a8
 800058c:	080005ac 	.word	0x080005ac

08000590 <_init>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr

0800059c <_fini>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	bf00      	nop
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr
