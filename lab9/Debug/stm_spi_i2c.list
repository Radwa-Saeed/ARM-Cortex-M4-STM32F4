
stm_spi_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a24  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000bb8  08000bb8  00010bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000be4  08000be4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000be4  08000be4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000be4  08000be4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000be4  08000be4  00010be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000be8  08000be8  00010be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08000bf4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000bf4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018f9  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000792  00000000  00000000  00021931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  000220c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00022280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e134  00000000  00000000  000223b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e5d  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000501ae  00000000  00000000  00032341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000824ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000470  00000000  00000000  00082544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ba0 	.word	0x08000ba0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000ba0 	.word	0x08000ba0

080001d4 <GPIO_EnableClock>:
#define GPIO_AFRH(ID)             DEF_REG(PortAddresses[ID], 0x24)


#define RCC_AHB1ENR               DEF_REG(0x40023800, 0x30)

void GPIO_EnableClock(unsigned char Port_id) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if (Port_id == 0) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d106      	bne.n	80001f2 <GPIO_EnableClock+0x1e>
    RCC_AHB1ENR |= (1 << 0);
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a09      	ldr	r2, [pc, #36]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
  } else if (Port_id == 1) {
    RCC_AHB1ENR |= (1 << 1);
  }
}
 80001f0:	e008      	b.n	8000204 <GPIO_EnableClock+0x30>
  } else if (Port_id == 1) {
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d105      	bne.n	8000204 <GPIO_EnableClock+0x30>
    RCC_AHB1ENR |= (1 << 1);
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6013      	str	r3, [r2, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	40023830 	.word	0x40023830

08000214 <GPIO_Init>:

void GPIO_Init(unsigned char PortId, unsigned char PinNum,
               unsigned char PinMode, unsigned char DefaultState) {
 8000214:	b490      	push	{r4, r7}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4604      	mov	r4, r0
 800021c:	4608      	mov	r0, r1
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	4623      	mov	r3, r4
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4603      	mov	r3, r0
 8000228:	71bb      	strb	r3, [r7, #6]
 800022a:	460b      	mov	r3, r1
 800022c:	717b      	strb	r3, [r7, #5]
 800022e:	4613      	mov	r3, r2
 8000230:	713b      	strb	r3, [r7, #4]
  GPIO_MODER(PortId) &= ~(0x03 << 2 * PinNum);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a50      	ldr	r2, [pc, #320]	; (8000378 <GPIO_Init+0x164>)
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	79ba      	ldrb	r2, [r7, #6]
 800023e:	0052      	lsls	r2, r2, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f202 	lsl.w	r2, r1, r2
 8000246:	43d2      	mvns	r2, r2
 8000248:	4610      	mov	r0, r2
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	494a      	ldr	r1, [pc, #296]	; (8000378 <GPIO_Init+0x164>)
 800024e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000252:	4003      	ands	r3, r0
 8000254:	6013      	str	r3, [r2, #0]
  GPIO_MODER(PortId) |= PinMode << 2 * PinNum;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a47      	ldr	r2, [pc, #284]	; (8000378 <GPIO_Init+0x164>)
 800025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	7979      	ldrb	r1, [r7, #5]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4610      	mov	r0, r2
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	4942      	ldr	r1, [pc, #264]	; (8000378 <GPIO_Init+0x164>)
 8000270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000274:	4303      	orrs	r3, r0
 8000276:	6013      	str	r3, [r2, #0]

  GPIO_TYPER(PortId) &= ~(1 << PinNum);
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a3f      	ldr	r2, [pc, #252]	; (8000378 <GPIO_Init+0x164>)
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	3304      	adds	r3, #4
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	43d2      	mvns	r2, r2
 800028e:	4610      	mov	r0, r2
 8000290:	79fa      	ldrb	r2, [r7, #7]
 8000292:	4939      	ldr	r1, [pc, #228]	; (8000378 <GPIO_Init+0x164>)
 8000294:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000298:	3204      	adds	r2, #4
 800029a:	4003      	ands	r3, r0
 800029c:	6013      	str	r3, [r2, #0]
  GPIO_TYPER(PortId) |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <GPIO_Init+0x164>)
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	3304      	adds	r3, #4
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	793a      	ldrb	r2, [r7, #4]
 80002ac:	f002 0101 	and.w	r1, r2, #1
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	4610      	mov	r0, r2
 80002b8:	79fa      	ldrb	r2, [r7, #7]
 80002ba:	492f      	ldr	r1, [pc, #188]	; (8000378 <GPIO_Init+0x164>)
 80002bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002c0:	3204      	adds	r2, #4
 80002c2:	4303      	orrs	r3, r0
 80002c4:	6013      	str	r3, [r2, #0]

  GPIO_PUPDR(PortId) &= ~(0x03 << 2 * PinNum);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a2b      	ldr	r2, [pc, #172]	; (8000378 <GPIO_Init+0x164>)
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	330c      	adds	r3, #12
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	79fa      	ldrb	r2, [r7, #7]
 80002e2:	4925      	ldr	r1, [pc, #148]	; (8000378 <GPIO_Init+0x164>)
 80002e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002e8:	320c      	adds	r2, #12
 80002ea:	4003      	ands	r3, r0
 80002ec:	6013      	str	r3, [r2, #0]
  GPIO_PUPDR(PortId) |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a21      	ldr	r2, [pc, #132]	; (8000378 <GPIO_Init+0x164>)
 80002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f6:	330c      	adds	r3, #12
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	793a      	ldrb	r2, [r7, #4]
 80002fc:	1052      	asrs	r2, r2, #1
 80002fe:	f002 0103 	and.w	r1, r2, #3
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4610      	mov	r0, r2
 800030c:	79fa      	ldrb	r2, [r7, #7]
 800030e:	491a      	ldr	r1, [pc, #104]	; (8000378 <GPIO_Init+0x164>)
 8000310:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000314:	320c      	adds	r2, #12
 8000316:	4303      	orrs	r3, r0
 8000318:	6013      	str	r3, [r2, #0]

  GPIO_OSPEEDR(PortId) &= ~(0x03 << 2 * PinNum);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4a16      	ldr	r2, [pc, #88]	; (8000378 <GPIO_Init+0x164>)
 800031e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000322:	3308      	adds	r3, #8
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	79ba      	ldrb	r2, [r7, #6]
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	4610      	mov	r0, r2
 8000334:	79fa      	ldrb	r2, [r7, #7]
 8000336:	4910      	ldr	r1, [pc, #64]	; (8000378 <GPIO_Init+0x164>)
 8000338:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800033c:	3208      	adds	r2, #8
 800033e:	4003      	ands	r3, r0
 8000340:	6013      	str	r3, [r2, #0]
  GPIO_OSPEEDR(PortId) |= ((DefaultState & _SPEED_MASK) >> _SPEED_SHIFT) << (2 * PinNum);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <GPIO_Init+0x164>)
 8000346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034a:	3308      	adds	r3, #8
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	793a      	ldrb	r2, [r7, #4]
 8000350:	10d2      	asrs	r2, r2, #3
 8000352:	f002 0103 	and.w	r1, r2, #3
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	0052      	lsls	r2, r2, #1
 800035a:	fa01 f202 	lsl.w	r2, r1, r2
 800035e:	4610      	mov	r0, r2
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	4905      	ldr	r1, [pc, #20]	; (8000378 <GPIO_Init+0x164>)
 8000364:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000368:	3208      	adds	r2, #8
 800036a:	4303      	orrs	r3, r0
 800036c:	6013      	str	r3, [r2, #0]

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bc90      	pop	{r4, r7}
 8000376:	4770      	bx	lr
 8000378:	20000000 	.word	0x20000000

0800037c <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PortId, unsigned char PinNum,
                            unsigned char Data) {
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
 8000386:	460b      	mov	r3, r1
 8000388:	71bb      	strb	r3, [r7, #6]
 800038a:	4613      	mov	r3, r2
 800038c:	717b      	strb	r3, [r7, #5]
  unsigned char result;

  if (((GPIO_MODER(PortId) & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	4a22      	ldr	r2, [pc, #136]	; (800041c <GPIO_WritePin+0xa0>)
 8000392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	2103      	movs	r1, #3
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	401a      	ands	r2, r3
 80003a4:	79bb      	ldrb	r3, [r7, #6]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	fa22 f303 	lsr.w	r3, r2, r3
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d12b      	bne.n	8000408 <GPIO_WritePin+0x8c>
    if (Data) {
 80003b0:	797b      	ldrb	r3, [r7, #5]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d012      	beq.n	80003dc <GPIO_WritePin+0x60>
      GPIO_ODR(PortId) |= (1 << PinNum);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4a18      	ldr	r2, [pc, #96]	; (800041c <GPIO_WritePin+0xa0>)
 80003ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003be:	3314      	adds	r3, #20
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	79ba      	ldrb	r2, [r7, #6]
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	4610      	mov	r0, r2
 80003cc:	79fa      	ldrb	r2, [r7, #7]
 80003ce:	4913      	ldr	r1, [pc, #76]	; (800041c <GPIO_WritePin+0xa0>)
 80003d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003d4:	3214      	adds	r2, #20
 80003d6:	4303      	orrs	r3, r0
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	e012      	b.n	8000402 <GPIO_WritePin+0x86>
    } else {
      GPIO_ODR(PortId) &= ~(1 << PinNum);
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <GPIO_WritePin+0xa0>)
 80003e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e4:	3314      	adds	r3, #20
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	79ba      	ldrb	r2, [r7, #6]
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4610      	mov	r0, r2
 80003f4:	79fa      	ldrb	r2, [r7, #7]
 80003f6:	4909      	ldr	r1, [pc, #36]	; (800041c <GPIO_WritePin+0xa0>)
 80003f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003fc:	3214      	adds	r2, #20
 80003fe:	4003      	ands	r3, r0
 8000400:	6013      	str	r3, [r2, #0]
    }
    result = OK;
 8000402:	2300      	movs	r3, #0
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e001      	b.n	800040c <GPIO_WritePin+0x90>
  } else {
    result = NOK;
 8000408:	2301      	movs	r3, #1
 800040a:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000

08000420 <I2C1_Init>:
#define I2C1_START_GEN() (I2C1_CR1 |= I2C_CR1_START_Msk)
#define I2C1_STOP_GEN() (I2C1_CR1 |= I2C_CR1_STOP_Msk)
#define I2C1_MASTER_ACK() (I2C1_CR1 |= (I2C_CR1_ACK_Msk))
#define I2C1_MASTER_NACK() (I2C1_CR1 &= ~(I2C_CR1_ACK_Msk))

void I2C1_Init() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  I2C1_RCC_EN();
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <I2C1_Init+0x88>)
 8000426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000428:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <I2C1_Init+0x88>)
 800042a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800042e:	6413      	str	r3, [r2, #64]	; 0x40

  GPIO_EnableClock(1);
 8000430:	2001      	movs	r0, #1
 8000432:	f7ff fecf 	bl	80001d4 <GPIO_EnableClock>
  GPIO_Init(1, 6, ALTERNATE_FUN, OPEN_DRAIN);
 8000436:	2301      	movs	r3, #1
 8000438:	2202      	movs	r2, #2
 800043a:	2106      	movs	r1, #6
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff fee9 	bl	8000214 <GPIO_Init>
  GPIO_Init(1, 7, ALTERNATE_FUN, OPEN_DRAIN);
 8000442:	2301      	movs	r3, #1
 8000444:	2202      	movs	r2, #2
 8000446:	2107      	movs	r1, #7
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff fee3 	bl	8000214 <GPIO_Init>
  I2C1_AF_EN();
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <I2C1_Init+0x8c>)
 8000450:	6a1b      	ldr	r3, [r3, #32]
 8000452:	4a16      	ldr	r2, [pc, #88]	; (80004ac <I2C1_Init+0x8c>)
 8000454:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000458:	6213      	str	r3, [r2, #32]

  I2C1_CR1 &= ~(I2C_CR1_PE_Msk);
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <I2C1_Init+0x90>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <I2C1_Init+0x90>)
 8000460:	f023 0301 	bic.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]

  /* Standard mode 2MHZ Peripheral freq */
  I2C1_CR2 &= ~(I2C_CR2_FREQ_Msk);
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <I2C1_Init+0x90>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <I2C1_Init+0x90>)
 800046c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000470:	6053      	str	r3, [r2, #4]
  I2C1_CR2 |= 16;
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <I2C1_Init+0x90>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <I2C1_Init+0x90>)
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	6053      	str	r3, [r2, #4]

  /* 100 KHz  master clk*/
  I2C1_CCR = 0;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <I2C1_Init+0x90>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  I2C1_CCR |= 80;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <I2C1_Init+0x90>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <I2C1_Init+0x90>)
 800048a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800048e:	61d3      	str	r3, [r2, #28]

  /* Sm mode, the maximum allowed SCL rise time is 1000 ns. */
  I2C1_TRISE = 17;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <I2C1_Init+0x90>)
 8000492:	2211      	movs	r2, #17
 8000494:	621a      	str	r2, [r3, #32]
  //   I2C1_CR2 |= I2C_CR2_ITEVTEN_Msk;
  //   I2C1_CR2 |= I2C_CR2_ITBUFEN_Msk;
  //   NVIC_ISER0 = (1 << 31);

  /* Enable I2C1 */
  I2C1_CR1 |= I2C_CR1_PE_Msk;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <I2C1_Init+0x90>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <I2C1_Init+0x90>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6013      	str	r3, [r2, #0]
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40005400 	.word	0x40005400

080004b4 <I2C1_Start>:

void I2C1_Start() {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  I2C1_START_GEN();
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <I2C1_Start+0x2c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <I2C1_Start+0x2c>)
 80004be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c2:	6013      	str	r3, [r2, #0]
  while (!(I2C1_SR1 & I2C_SR1_SB_Msk));
 80004c4:	bf00      	nop
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <I2C1_Start+0x2c>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <I2C1_Start+0x12>
}
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40005400 	.word	0x40005400

080004e4 <I2C1_Stop>:

void I2C1_Stop() {
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  I2C1_STOP_GEN();
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <I2C1_Stop+0x34>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <I2C1_Stop+0x34>)
 80004f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f4:	6013      	str	r3, [r2, #0]
  for (int k = 0; k < 100; k++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e002      	b.n	8000502 <I2C1_Stop+0x1e>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3301      	adds	r3, #1
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b63      	cmp	r3, #99	; 0x63
 8000506:	ddf9      	ble.n	80004fc <I2C1_Stop+0x18>
    ;
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40005400 	.word	0x40005400

0800051c <I2C1_MasterTxAddr>:
void I2C1_MasterTxAddr(unsigned char SlaveAddr) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  I2C1_DR = SlaveAddr;
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <I2C1_MasterTxAddr+0x34>)
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	6113      	str	r3, [r2, #16]
  while (!(I2C1_SR1 & I2C_SR1_ADDR_Msk))
 800052c:	bf00      	nop
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <I2C1_MasterTxAddr+0x34>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <I2C1_MasterTxAddr+0x12>
    ;
  /* Flag cleared by reading two registers */
  I2C1_SR1;
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <I2C1_MasterTxAddr+0x34>)
 800053c:	695b      	ldr	r3, [r3, #20]
  I2C1_SR2;
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <I2C1_MasterTxAddr+0x34>)
 8000540:	699b      	ldr	r3, [r3, #24]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40005400 	.word	0x40005400

08000554 <I2C1_MasterTxSingleData>:

void I2C1_MasterTxSingleData(unsigned char Data) {
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  while (!(I2C1_SR1 & I2C_SR1_TXE_Msk))
 800055e:	bf00      	nop
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <I2C1_MasterTxSingleData+0x3c>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <I2C1_MasterTxSingleData+0xc>
    ;
  I2C1_DR = Data;
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <I2C1_MasterTxSingleData+0x3c>)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	6113      	str	r3, [r2, #16]
  while (!(I2C1_SR1 & I2C_SR1_BTF_Msk))
 8000572:	bf00      	nop
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <I2C1_MasterTxSingleData+0x3c>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f9      	beq.n	8000574 <I2C1_MasterTxSingleData+0x20>
    ;
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40005400 	.word	0x40005400

08000594 <RTC_Init>:
#include "I2C.h"

void RTC_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    I2C1_Start();   
 8000598:	f7ff ff8c 	bl	80004b4 <I2C1_Start>
    I2C1_MasterTxAddr(0xD0);
 800059c:	20d0      	movs	r0, #208	; 0xd0
 800059e:	f7ff ffbd 	bl	800051c <I2C1_MasterTxAddr>
    I2C1_MasterTxSingleData(0x07);
 80005a2:	2007      	movs	r0, #7
 80005a4:	f7ff ffd6 	bl	8000554 <I2C1_MasterTxSingleData>
    I2C1_MasterTxSingleData(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ffd3 	bl	8000554 <I2C1_MasterTxSingleData>
    I2C1_Stop(); 
 80005ae:	f7ff ff99 	bl	80004e4 <I2C1_Stop>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <SPI1_Init>:
#include "stm32f401xc.h"

#define SPI1_RCC_EN() (RCC->APB2ENR |= RCC_APB2ENR_SPI1EN)
#define SPI1_AF_EN() (GPIOA->AFR[0] |= 0x555 << (5 * 4))

void SPI1_Init(unsigned char MasterSlave, unsigned char ClkPol, unsigned char ClkPhase) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	460b      	mov	r3, r1
 80005c4:	71bb      	strb	r3, [r7, #6]
 80005c6:	4613      	mov	r3, r2
 80005c8:	717b      	strb	r3, [r7, #5]

  SPI1_RCC_EN();
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <SPI1_Init+0xe0>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ce:	4a32      	ldr	r2, [pc, #200]	; (8000698 <SPI1_Init+0xe0>)
 80005d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d4:	6453      	str	r3, [r2, #68]	; 0x44

  GPIO_EnableClock(0);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fdfc 	bl	80001d4 <GPIO_EnableClock>
  GPIO_Init(0, 5, ALTERNATE_FUN, PUSH_PULL);
 80005dc:	2300      	movs	r3, #0
 80005de:	2202      	movs	r2, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff fe16 	bl	8000214 <GPIO_Init>
  GPIO_Init(0, 6, ALTERNATE_FUN, PUSH_PULL);
 80005e8:	2300      	movs	r3, #0
 80005ea:	2202      	movs	r2, #2
 80005ec:	2106      	movs	r1, #6
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff fe10 	bl	8000214 <GPIO_Init>
  GPIO_Init(0, 7, ALTERNATE_FUN, PUSH_PULL);
 80005f4:	2300      	movs	r3, #0
 80005f6:	2202      	movs	r2, #2
 80005f8:	2107      	movs	r1, #7
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fe0a 	bl	8000214 <GPIO_Init>
  SPI1_AF_EN();
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <SPI1_Init+0xe4>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <SPI1_Init+0xe4>)
 8000606:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800060a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800060e:	6213      	str	r3, [r2, #32]


  SPI1_CR1 |= (0x3 << SPI_CR1_SSI_Pos);
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <SPI1_Init+0xe8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <SPI1_Init+0xe8>)
 8000616:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800061a:	6013      	str	r3, [r2, #0]

  SPI1_CR1 &= ~(1 << SPI_CR1_MSTR_Pos);
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SPI1_Init+0xe8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <SPI1_Init+0xe8>)
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	6013      	str	r3, [r2, #0]
  SPI1_CR1 |= (MasterSlave << SPI_CR1_MSTR_Pos);
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SPI1_Init+0xe8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	4611      	mov	r1, r2
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SPI1_Init+0xe8>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6013      	str	r3, [r2, #0]

  SPI1_CR1 &= ~(1 << SPI_CR1_CPOL_Pos);
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SPI1_Init+0xe8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <SPI1_Init+0xe8>)
 800063e:	f023 0302 	bic.w	r3, r3, #2
 8000642:	6013      	str	r3, [r2, #0]
  SPI1_CR1 |= (ClkPol << SPI_CR1_CPOL_Pos);
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SPI1_Init+0xe8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	79ba      	ldrb	r2, [r7, #6]
 800064a:	0052      	lsls	r2, r2, #1
 800064c:	4611      	mov	r1, r2
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <SPI1_Init+0xe8>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6013      	str	r3, [r2, #0]

  SPI1_CR1 &= ~(1 << SPI_CR1_CPHA_Pos);
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <SPI1_Init+0xe8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <SPI1_Init+0xe8>)
 800065a:	f023 0301 	bic.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
  SPI1_CR1 |= (ClkPhase << SPI_CR1_CPHA_Pos);
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <SPI1_Init+0xe8>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <SPI1_Init+0xe8>)
 8000668:	4313      	orrs	r3, r2
 800066a:	600b      	str	r3, [r1, #0]

  /*************************************************************************/
  // Baud Rate
  SPI1_CR1 &= ~(0x7 << SPI_CR1_BR_Pos);
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <SPI1_Init+0xe8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <SPI1_Init+0xe8>)
 8000672:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000676:	6013      	str	r3, [r2, #0]
  SPI1_CR1 |= (0x3 << SPI_CR1_BR_Pos);  // 16/16 -> 1MHZ
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <SPI1_Init+0xe8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <SPI1_Init+0xe8>)
 800067e:	f043 0318 	orr.w	r3, r3, #24
 8000682:	6013      	str	r3, [r2, #0]
  /*************************************************************************/

  SPI1_CR1 |= (1 << SPI_CR1_SPE_Pos);
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <SPI1_Init+0xe8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <SPI1_Init+0xe8>)
 800068a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40013000 	.word	0x40013000

080006a4 <SPI1_TransmitRecieveByte>:

unsigned char SPI1_TransmitRecieveByte(unsigned char TxData) {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if (SPI1_SR & (1 << SPI_SR_TXE_Pos)) {
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <SPI1_TransmitRecieveByte+0x40>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00d      	beq.n	80006d6 <SPI1_TransmitRecieveByte+0x32>
    SPI1_DR = TxData;
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <SPI1_TransmitRecieveByte+0x44>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	6013      	str	r3, [r2, #0]
    while (SPI1_SR & (1 << SPI_SR_BSY_Pos));
 80006c0:	bf00      	nop
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <SPI1_TransmitRecieveByte+0x40>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f9      	bne.n	80006c2 <SPI1_TransmitRecieveByte+0x1e>
    return SPI1_DR;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <SPI1_TransmitRecieveByte+0x44>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	e000      	b.n	80006d8 <SPI1_TransmitRecieveByte+0x34>
  }
  return -1;
 80006d6:	23ff      	movs	r3, #255	; 0xff
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40013008 	.word	0x40013008
 80006e8:	4001300c 	.word	0x4001300c

080006ec <TC72_Init>:
#include "TC72.h"
#include "SPI.h"
#include "Util.h"


void TC72_Init(unsigned char Mode) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    /// TODO:
    TC72_RegisterWrite(0x80, 0x00);
 80006f6:	2100      	movs	r1, #0
 80006f8:	2080      	movs	r0, #128	; 0x80
 80006fa:	f000 f804 	bl	8000706 <TC72_RegisterWrite>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <TC72_RegisterWrite>:

void TC72_RegisterWrite(unsigned char RegAdd, unsigned char Data) {
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
  SPI1_TransmitRecieveByte(RegAdd | (1 << 7));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffc0 	bl	80006a4 <SPI1_TransmitRecieveByte>
  SPI1_TransmitRecieveByte(Data);
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffbc 	bl	80006a4 <SPI1_TransmitRecieveByte>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <TC72_RegisterRead>:

void TC72_RegisterRead(unsigned char RegAdd, unsigned char* DataPtr) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
    SPI1_TransmitRecieveByte(RegAdd & (~(1 << 7)));
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffab 	bl	80006a4 <SPI1_TransmitRecieveByte>
    *DataPtr = SPI1_TransmitRecieveByte(0x00);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ffa8 	bl	80006a4 <SPI1_TransmitRecieveByte>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <USART2_Init>:
#include "GPIO.h"
#include "stm32f401xc.h"

void USART2_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  GPIO_EnableClock(0);
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fd33 	bl	80001d4 <GPIO_EnableClock>
  GPIO_Init(0, 2, ALTERNATE_FUN, PUSH_PULL);
 800076e:	2300      	movs	r3, #0
 8000770:	2202      	movs	r2, #2
 8000772:	2102      	movs	r1, #2
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fd4d 	bl	8000214 <GPIO_Init>

  GPIOA->AFR[0] &= ~(0xf << 4 * 2);
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <USART2_Init+0x84>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a1a      	ldr	r2, [pc, #104]	; (80007e8 <USART2_Init+0x84>)
 8000780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000784:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= 0x7 << 4 * 2;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <USART2_Init+0x84>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <USART2_Init+0x84>)
 800078c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000790:	6213      	str	r3, [r2, #32]


  RCC->APB1ENR |= 1 << RCC_APB1ENR_USART2EN_Pos;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <USART2_Init+0x88>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <USART2_Init+0x88>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40

  USART2->CR1 &= ~(1 << USART_CR1_M_Pos);
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <USART2_Init+0x8c>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <USART2_Init+0x8c>)
 80007a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007a8:	60d3      	str	r3, [r2, #12]

  USART2->CR2 &= ~(USART_CR2_STOP);
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <USART2_Init+0x8c>)
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <USART2_Init+0x8c>)
 80007b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007b4:	6113      	str	r3, [r2, #16]

  USART2->CR1 &= ~(1 << USART_CR1_OVER8_Pos);
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <USART2_Init+0x8c>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <USART2_Init+0x8c>)
 80007bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007c0:	60d3      	str	r3, [r2, #12]

  USART2->BRR = 0x683;  // Baud Rate 9600
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <USART2_Init+0x8c>)
 80007c4:	f240 6283 	movw	r2, #1667	; 0x683
 80007c8:	609a      	str	r2, [r3, #8]

  /* Enable Transmission block */
  USART2->CR1 |= (1 << USART_CR1_TE_Pos);
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <USART2_Init+0x8c>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <USART2_Init+0x8c>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	60d3      	str	r3, [r2, #12]

  // /* Enable Receive block */
  // USART2->CR1 |= (1 << USART_CR1_RE_Pos);

  /* Enable USART2 */
  USART2->CR1 |= (1 << USART_CR1_UE_Pos);
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <USART2_Init+0x8c>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <USART2_Init+0x8c>)
 80007dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e0:	60d3      	str	r3, [r2, #12]
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40004400 	.word	0x40004400

080007f4 <USART2_Transmit>:

void USART2_Transmit(const char* Str) {
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  unsigned char i = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
  while (Str[i] != '\0') {
 8000800:	e01b      	b.n	800083a <USART2_Transmit+0x46>
    if (USART2->SR & USART_SR_TXE) {
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <USART2_Transmit+0x60>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	2b00      	cmp	r3, #0
 800080c:	d015      	beq.n	800083a <USART2_Transmit+0x46>
      USART2->DR = Str[i];
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4413      	add	r3, r2
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <USART2_Transmit+0x60>)
 8000818:	605a      	str	r2, [r3, #4]
      while (!(USART2->SR & USART_SR_TC));
 800081a:	bf00      	nop
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <USART2_Transmit+0x60>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <USART2_Transmit+0x28>
      USART2->SR &= ~(1 << USART_SR_TC_Pos);  // Clearing TC bit
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <USART2_Transmit+0x60>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <USART2_Transmit+0x60>)
 800082e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000832:	6013      	str	r3, [r2, #0]
      i++;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	3301      	adds	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
  while (Str[i] != '\0') {
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1dd      	bne.n	8000802 <USART2_Transmit+0xe>
    }
  }
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40004400 	.word	0x40004400

08000858 <main>:
#define TC72_UNSELECT() (GPIO_WritePin(1, 0, 0))

void floatToStr(float val, char data[]);
void timeToStr(unsigned char time[], char data[]);

int main(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  char usart2TempData[] = {'-', ' ', ' ', '.', ' ', ' ', '\r', '\n', '\0'};
 800085e:	4a4d      	ldr	r2, [pc, #308]	; (8000994 <main+0x13c>)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	c303      	stmia	r3!, {r0, r1}
 8000868:	701a      	strb	r2, [r3, #0]
  char usart2TimeData[] = {' ', ' ', ':', ' ', ' ', ':',' ', ' ', '\r', '\n', '\0'};
 800086a:	4a4b      	ldr	r2, [pc, #300]	; (8000998 <main+0x140>)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000870:	c303      	stmia	r3!, {r0, r1}
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	3302      	adds	r3, #2
 8000876:	0c12      	lsrs	r2, r2, #16
 8000878:	701a      	strb	r2, [r3, #0]
  unsigned char spiData = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	70fb      	strb	r3, [r7, #3]
  float temperature = 0;
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  unsigned char buffer[3] = {0};
 8000884:	4b45      	ldr	r3, [pc, #276]	; (800099c <main+0x144>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	803b      	strh	r3, [r7, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	70bb      	strb	r3, [r7, #2]

  /* Slave Select */
  GPIO_EnableClock(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fca0 	bl	80001d4 <GPIO_EnableClock>
  GPIO_Init(1, 0, OUTPUT, PUSH_PULL);
 8000894:	2300      	movs	r3, #0
 8000896:	2201      	movs	r2, #1
 8000898:	2100      	movs	r1, #0
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fcba 	bl	8000214 <GPIO_Init>
  GPIO_WritePin(1, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff fd69 	bl	800037c <GPIO_WritePin>

  USART2_Init();
 80008aa:	f7ff ff5b 	bl	8000764 <USART2_Init>
  USART2_Transmit("Hello SPI I2C\r\n");
 80008ae:	483c      	ldr	r0, [pc, #240]	; (80009a0 <main+0x148>)
 80008b0:	f7ff ffa0 	bl	80007f4 <USART2_Transmit>
  SPI1_Init(MASTER, IDLE_LOW, SAMPLE_SOCAND_TRANSITION);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2100      	movs	r1, #0
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fe7d 	bl	80005b8 <SPI1_Init>


  GPIO_Init(1, 1, OUTPUT, PUSH_PULL);
 80008be:	2300      	movs	r3, #0
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fca5 	bl	8000214 <GPIO_Init>
  I2C1_Init();
 80008ca:	f7ff fda9 	bl	8000420 <I2C1_Init>
  RTC_Init();
 80008ce:	f7ff fe61 	bl	8000594 <RTC_Init>

  TC72_SELECT();
 80008d2:	2201      	movs	r2, #1
 80008d4:	2100      	movs	r1, #0
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fd50 	bl	800037c <GPIO_WritePin>
  TC72_Init(0);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff05 	bl	80006ec <TC72_Init>
  TC72_UNSELECT();
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fd48 	bl	800037c <GPIO_WritePin>
  
  while (1) {
    temperature = 0.0f;
 80008ec:	f04f 0300 	mov.w	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    TC72_SELECT();
 80008f2:	2201      	movs	r2, #1
 80008f4:	2100      	movs	r1, #0
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fd40 	bl	800037c <GPIO_WritePin>
    TC72_RegisterRead(0x01, &spiData);
 80008fc:	1cfb      	adds	r3, r7, #3
 80008fe:	4619      	mov	r1, r3
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff ff17 	bl	8000734 <TC72_RegisterRead>
    TC72_UNSELECT();
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fd36 	bl	800037c <GPIO_WritePin>

    if (spiData & (1 << 7)) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	b25b      	sxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	da07      	bge.n	8000928 <main+0xd0>
      temperature += 0.5f;
 8000918:	edd7 7a07 	vldr	s15, [r7, #28]
 800091c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000924:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    if (spiData & (1 << 6)) {
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	2b00      	cmp	r3, #0
 8000930:	d007      	beq.n	8000942 <main+0xea>
      temperature += 0.25f;
 8000932:	edd7 7a07 	vldr	s15, [r7, #28]
 8000936:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800093a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800093e:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    TC72_SELECT();
 8000942:	2201      	movs	r2, #1
 8000944:	2100      	movs	r1, #0
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fd18 	bl	800037c <GPIO_WritePin>
    TC72_RegisterRead(0x02, &spiData);
 800094c:	1cfb      	adds	r3, r7, #3
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff feef 	bl	8000734 <TC72_RegisterRead>
    TC72_UNSELECT();
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fd0e 	bl	800037c <GPIO_WritePin>

    temperature += (signed char)spiData;
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800096c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	edc7 7a07 	vstr	s15, [r7, #28]

    floatToStr(temperature, usart2TempData);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4618      	mov	r0, r3
 800097e:	ed97 0a07 	vldr	s0, [r7, #28]
 8000982:	f000 f80f 	bl	80009a4 <floatToStr>
    USART2_Transmit(usart2TempData);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff32 	bl	80007f4 <USART2_Transmit>
    temperature = 0.0f;
 8000990:	e7ac      	b.n	80008ec <main+0x94>
 8000992:	bf00      	nop
 8000994:	08000bc8 	.word	0x08000bc8
 8000998:	08000bd4 	.word	0x08000bd4
 800099c:	08000be0 	.word	0x08000be0
 80009a0:	08000bb8 	.word	0x08000bb8

080009a4 <floatToStr>:
  return 0;
}

#define CHAR(x)  ((x) + '0')

void floatToStr(float val, char data[]) {
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ae:	6038      	str	r0, [r7, #0]
  if (val < 0) {
 80009b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009bc:	d50b      	bpl.n	80009d6 <floatToStr+0x32>
    *data = '-';
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	222d      	movs	r2, #45	; 0x2d
 80009c2:	701a      	strb	r2, [r3, #0]
    data++;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	603b      	str	r3, [r7, #0]
    val *= -1;
 80009ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ce:	eef1 7a67 	vneg.f32	s15, s15
 80009d2:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  int intVal = val * 100;
 80009d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009da:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000ad8 <floatToStr+0x134>
 80009de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e6:	ee17 3a90 	vmov	r3, s15
 80009ea:	60fb      	str	r3, [r7, #12]
  data[4] = (intVal % 10) + '0';
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <floatToStr+0x138>)
 80009f0:	fb83 1302 	smull	r1, r3, r3, r2
 80009f4:	1099      	asrs	r1, r3, #2
 80009f6:	17d3      	asrs	r3, r2, #31
 80009f8:	1ac9      	subs	r1, r1, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	1ad1      	subs	r1, r2, r3
 8000a04:	b2ca      	uxtb	r2, r1
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	3230      	adds	r2, #48	; 0x30
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
  intVal /= 10;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a32      	ldr	r2, [pc, #200]	; (8000adc <floatToStr+0x138>)
 8000a14:	fb82 1203 	smull	r1, r2, r2, r3
 8000a18:	1092      	asrs	r2, r2, #2
 8000a1a:	17db      	asrs	r3, r3, #31
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	60fb      	str	r3, [r7, #12]
  data[3] = (intVal % 10) + '0';
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <floatToStr+0x138>)
 8000a24:	fb83 1302 	smull	r1, r3, r3, r2
 8000a28:	1099      	asrs	r1, r3, #2
 8000a2a:	17d3      	asrs	r3, r2, #31
 8000a2c:	1ac9      	subs	r1, r1, r3
 8000a2e:	460b      	mov	r3, r1
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	440b      	add	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1ad1      	subs	r1, r2, r3
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	3230      	adds	r2, #48	; 0x30
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	701a      	strb	r2, [r3, #0]
  data[2] = '.';
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	3302      	adds	r3, #2
 8000a48:	222e      	movs	r2, #46	; 0x2e
 8000a4a:	701a      	strb	r2, [r3, #0]
  intVal /= 10;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4a23      	ldr	r2, [pc, #140]	; (8000adc <floatToStr+0x138>)
 8000a50:	fb82 1203 	smull	r1, r2, r2, r3
 8000a54:	1092      	asrs	r2, r2, #2
 8000a56:	17db      	asrs	r3, r3, #31
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	60fb      	str	r3, [r7, #12]
  data[1] = (intVal % 10) + '0';
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <floatToStr+0x138>)
 8000a60:	fb83 1302 	smull	r1, r3, r3, r2
 8000a64:	1099      	asrs	r1, r3, #2
 8000a66:	17d3      	asrs	r3, r2, #31
 8000a68:	1ac9      	subs	r1, r1, r3
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	440b      	add	r3, r1
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	1ad1      	subs	r1, r2, r3
 8000a74:	b2ca      	uxtb	r2, r1
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	3230      	adds	r2, #48	; 0x30
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	701a      	strb	r2, [r3, #0]
  intVal /= 10;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <floatToStr+0x138>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	60fb      	str	r3, [r7, #12]
  data[0] = (intVal % 10) + '0';
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <floatToStr+0x138>)
 8000a94:	fb83 1302 	smull	r1, r3, r3, r2
 8000a98:	1099      	asrs	r1, r3, #2
 8000a9a:	17d3      	asrs	r3, r2, #31
 8000a9c:	1ac9      	subs	r1, r1, r3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	1ad1      	subs	r1, r2, r3
 8000aa8:	b2cb      	uxtb	r3, r1
 8000aaa:	3330      	adds	r3, #48	; 0x30
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]

  data[5] = '\r';
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	3305      	adds	r3, #5
 8000ab6:	220d      	movs	r2, #13
 8000ab8:	701a      	strb	r2, [r3, #0]
  data[6] = '\n';
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3306      	adds	r3, #6
 8000abe:	220a      	movs	r2, #10
 8000ac0:	701a      	strb	r2, [r3, #0]
  data[7] = '\0';
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	3307      	adds	r3, #7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	42c80000 	.word	0x42c80000
 8000adc:	66666667 	.word	0x66666667

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f000 f811 	bl	8000b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fe8f 	bl	8000858 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000b48:	08000bec 	.word	0x08000bec
  ldr r2, =_sbss
 8000b4c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000b50:	20000024 	.word	0x20000024

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <__libc_init_array>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4d0d      	ldr	r5, [pc, #52]	; (8000b90 <__libc_init_array+0x38>)
 8000b5c:	4c0d      	ldr	r4, [pc, #52]	; (8000b94 <__libc_init_array+0x3c>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	2600      	movs	r6, #0
 8000b64:	42a6      	cmp	r6, r4
 8000b66:	d109      	bne.n	8000b7c <__libc_init_array+0x24>
 8000b68:	4d0b      	ldr	r5, [pc, #44]	; (8000b98 <__libc_init_array+0x40>)
 8000b6a:	4c0c      	ldr	r4, [pc, #48]	; (8000b9c <__libc_init_array+0x44>)
 8000b6c:	f000 f818 	bl	8000ba0 <_init>
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	10a4      	asrs	r4, r4, #2
 8000b74:	2600      	movs	r6, #0
 8000b76:	42a6      	cmp	r6, r4
 8000b78:	d105      	bne.n	8000b86 <__libc_init_array+0x2e>
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b80:	4798      	blx	r3
 8000b82:	3601      	adds	r6, #1
 8000b84:	e7ee      	b.n	8000b64 <__libc_init_array+0xc>
 8000b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b8a:	4798      	blx	r3
 8000b8c:	3601      	adds	r6, #1
 8000b8e:	e7f2      	b.n	8000b76 <__libc_init_array+0x1e>
 8000b90:	08000be4 	.word	0x08000be4
 8000b94:	08000be4 	.word	0x08000be4
 8000b98:	08000be4 	.word	0x08000be4
 8000b9c:	08000be8 	.word	0x08000be8

08000ba0 <_init>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr

08000bac <_fini>:
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	bf00      	nop
 8000bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bb2:	bc08      	pop	{r3}
 8000bb4:	469e      	mov	lr, r3
 8000bb6:	4770      	bx	lr
